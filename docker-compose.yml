services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: fastapi_backend_dev
    depends_on:
      # db:
      #   condition: service_healthy
      redis:
        condition: service_started
    env_file: backend/.env
    ports:
      - "8081:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:mockpie123@database-1.ct2myi22ccsm.eu-north-1.rds.amazonaws.com:5432/postgres
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000,http://react_frontend:3000,*
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - AI_SERVICE_URL=http://presentation-analyzer:8000
    volumes:
      - ./:/app  # Mount entire project so backend module is available
    restart: unless-stopped
    
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: react_frontend_dev
    env_file: frontend/.env
    environment:
      - HOST=0.0.0.0
      - PORT=3000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3000
      - REACT_APP_API_URL=http://localhost:8081
      - NEXT_PUBLIC_API_URL=http://localhost:8081
    depends_on:
      - backend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules_dev:/app/node_modules
      - /app/.next
    stdin_open: true
    tty: true
    restart: unless-stopped

  presentation-analyzer:
    build: 
      context: ./feedback_service
      dockerfile: Dockerfile.dev
    container_name: presentation_analyzer_dev
    ports:
      - "8082:8082"
    volumes:
      - ./feedback_service/app:/app/app
      - ./feedback_service/main.py:/app/main.py
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    container_name: redis_cache_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  # postgres_data_dev:
  redis_data_dev:
  frontend_node_modules_dev: